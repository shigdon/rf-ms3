"Status",
"Date",
"InterPro.Accession",
"InterPro.Description",
"GO.Annotations"),
col_types = "ccnfccnnnfcfcc",
na = c("", "-"))
# trim tail of ips accession to match input header ids
ips.common.RFR.PGWAS$Feature <- as.factor(substr(ips.common.RFR.PGWAS$Feature, 0, 16))
# Number of Features with annotations
unique(ips.common.RFR.PGWAS$Feature)
ips.common.RFR.PGWAS$Roary.Annotation <- ips.common.RFR.PGWAS.headers$Roary.Annotation[match(ips.common.RFR.PGWAS$Feature,
ips.common.RFR.PGWAS.headers$Feature)]
# create DF for Table 1 in Manuscript
RFR.PGWAS_common_table <- ips.common.RFR.PGWAS.headers
write_csv(RFR.PGWAS_common_table, "./output_tables/RFR.PGWAS_common_table.csv", col_names = T)
View(RFR.PGWAS_common_table)
View(table1)
View(ips.common.all)
View(ips.common.all.headers)
# Read in Gene Headers
ips.common.all.headers <- read.table("./data/bcw-lactococcus-only/ips-results/common_important_genes_34-headers.txt",
col.names = c("Feature",
"Roary.Annotation"),
sep = " ")
# add annotation description from roary/prokka
ips.common.all.headers$Roary.description <- scoary_genes$Annotation[match(ips.common.all.headers$Roary.Annotation,
scoary_genes$Gene)]
str(ips.common.all.headers)
# Read in IPS Table
ips.common.all <- read_tsv("./data/bcw-lactococcus-only/ips-results/common_important_genes_34.fa.tsv",
col_names = c("Feature",
"MD5 digest",
"Seq.Length",
"Analysis",
"Sig.Accession",
"Sig.Description",
"Start.Pos",
"Stop.Pos",
"Score",
"Status",
"Date",
"InterPro.Accession",
"InterPro.Description",
"GO.Annotations"),
col_types = "ccnfccnnnfcfcc",
na = c("", "-"))
# trim tail of ips accession to match input header ids
ips.common.all$Feature <- as.factor(substr(ips.common.all$Feature, 0, 16))
View(ips.common.all)
# set random seed for reproducibility
set.seed(8488)
# Create training set (70%) and test (30%) for the data
pg.split <- initial_split(pan_genome_state, 0.7)
# designate samples for training
pg.train <- training(pg.split)
pg.train %>% select("state") %>% count()
# designate samples for testing
pg.test <- testing(pg.split)
pg.test %>% select("state") %>% count()
# check proportions
63/90
# for reproducibility
set.seed(151)
# Run RF to classify diazotroph and control samples:
rf.classify <- randomForest( x = pg.train[, 1:(ncol(pg.train)-1)],
y = pg.train[, ncol(pg.train)], ntree = 501, importance = TRUE, proximities = TRUE)
# for reproducibility
set.seed(151)
# Run RF to classify diazotroph and control samples:
rfc2 <- randomForest( x = pg.train[, 1:(ncol(pg.train)-1)],
y = pg.train[, ncol(pg.train)], ntree = 501, importance = TRUE, proximities = TRUE)
print(rf.classify)
attributes(rf.classify)
plot(rf.classify)
print(rfc2)
attributes(rfc2)
plot(rfc2)
# isolate list
isolate.list <- data.frame(ID=rownames(metadata))
# subset to remove validation isolates: BCW.000631; BCW.000270; BCW.000689
validation.isolate.list <- data.frame(ID=c("BCW.000631", "BCW.000270", "BCW.000689"))
# subset to create validation isolate dataframe
pg.validation <- subset(pan_genome_state, rownames(pan_genome_state) %in% validation.isolate.list$ID)
#subset to create isolate dataframe for RF modeling
pg.state <- subset(pg.state, !rownames(pg.state) %in% validation.isolate.list$ID)
#subset to create isolate dataframe for RF modeling
pan_genome_state <- subset(pan_genome_state, !rownames(pan_genome_state) %in% validation.isolate.list$ID)
pan_genome <- read.table("data/bcw-lactococcus-only/gene_presence_absence.Rtab", sep ="\t", header = T, row.names = 1, stringsAsFactors = FALSE, quote = "")
#colnames(pan_genome)
tail(rownames(pan_genome))
metadata <- read.csv("data/bcw-lactococcus-only/metadata-bcw-lactococcus-only.csv", header = T, row.names = 1, stringsAsFactors = FALSE)
# transpose data frame
pan_genome_state <- data.frame(t(pan_genome))
# set classification state as factor
pan_genome_state$state <- factor(metadata[rownames(pan_genome_state), "state"])
class(pan_genome_state$state)
# transpose data frame
pan_genome_BNF <- data.frame(t(pan_genome))
# assess class of regression variable
pan_genome_BNF$BNF <- metadata[rownames(pan_genome_BNF), "bnf.ratio"]
class(pan_genome_BNF$BNF)
# isolate list
isolate.list <- data.frame(ID=rownames(metadata))
# subset to remove validation isolates: BCW.000631; BCW.000270; BCW.000689
validation.isolate.list <- data.frame(ID=c("BCW.000631", "BCW.000270", "BCW.000689"))
# subset to create validation isolate dataframe
pg.validation <- subset(pan_genome_state, rownames(pan_genome_state) %in% validation.isolate.list$ID)
#subset to create isolate dataframe for RF modeling
pg.state <- subset(pan_genome_state, !rownames(pan_genome_state) %in% validation.isolate.list$ID)
# set classification state as factor for training dataset
pg.state$state <- factor(metadata$state[match(rownames(pg.state), rownames(metadata))])
# count N samples surviving, should be 90 to reflect subtracting 3 validators
pg.state %>% select("state") %>% count()
# set random seed for reproducibility
set.seed(8488)
# Create training set (70%) and test (30%) for the data
pg.split <- initial_split(pan_genome_state, 0.7)
# designate samples for training
pg.train <- training(pg.split)
pg.train %>% select("state") %>% count()
# designate samples for testing
pg.test <- testing(pg.split)
pg.test %>% select("state") %>% count()
# check proportions
63/90
# set random seed for reproducibility
set.seed(8488)
# Create training set (70%) and test (30%) for the data
pg.split <- initial_split(pg.state, 0.7)
# designate samples for training
pg.train <- training(pg.split)
pg.train %>% select("state") %>% count()
# designate samples for testing
pg.test <- testing(pg.split)
pg.test %>% select("state") %>% count()
# check proportions
63/90
# for reproducibility
set.seed(151)
# Run RF to classify diazotroph and control samples:
rfc2 <- randomForest( x = pg.train[, 1:(ncol(pg.train)-1)],
y = pg.train[, ncol(pg.train)], ntree = 501, importance = TRUE, proximities = TRUE)
print(rfc2)
attributes(rfc2)
plot(rfc2)
library(doParallel)
cl <- parallel::makeCluster(8, setup_strategy = "sequential")
registerDoParallel(cl)
fit_control <- trainControl(method = "LOOCV")
rfc2_loocv <- train(state ~.,
pg.train,
method = "rf",
ntree = 501,
tuneGrid = data.frame(mtry = 4),
trControl = fit_control)
stopCluster(cl)
rfc2_loocv$results
# set random seed for reproducibility
set.seed(999)
library(doParallel)
cl <- parallel::makeCluster(8, setup_strategy = "sequential")
registerDoParallel(cl)
fit_control <- trainControl(method = "LOOCV")
rfc2_loocv <- train(state ~.,
pg.train,
method = "rf",
ntree = 501,
tuneGrid = data.frame(mtry = 99),
trControl = fit_control)
stopCluster(cl)
rfc2_loocv$results
rfc2.p1 <- predict(rfc2, pg.train)
confusionMatrix(rfc2.p1, pg.train$state)
rfc2.p2 <- predict(rfc2, pg.test)
confusionMatrix(rfc2.p2, pg.test$state)
rfc2_imp.df <- as.data.frame(rfc2$importance)
rfc2_imp.df$features <- rownames(rfc2_imp.df)
rfc2_imp.df.sorted <- arrange(rfc2_imp.df, desc(MeanDecreaseAccuracy))
barplot(rfc2_imp.df.sorted$MeanDecreaseAccuracy, ylab = "Variable Importance")
rfc2.p3 <- predict(rfc2, pg.validation)
confusionMatrix(rfc2.p3, pg.validation$state)
# set random seed for reproducibility
set.seed(151)
# Run RF to refress genes against BNF score (bnf.ratio):
RF_BNF_regress <- randomForest( x = pan_genome_BNF[, 1:(ncol(pan_genome_BNF)-1)],
y = pan_genome_BNF[, ncol(pan_genome_BNF)], ntree = 501, importance = TRUE, proximities = TRUE)
RF_BNF_regress
plot(RF_BNF_regress)
plot(RF_state_classify)
saveRDS( file = "RF.models-lactococcus-only/RF_BNF_model.rda" , RF_BNF_regress )
library(doParallel)
cl <- parallel::makeCluster(11, setup_strategy = "sequential")
registerDoParallel(cl)
# Leave one out cross-validation
fit_control <- trainControl(method = "LOOCV")
rfc_loocv <- train(state ~.,
pan_genome_state,
method = "rf",
ntree = 501,
tuneGrid = data.frame(mtry = 99),
trControl = fit_control)
stopCluster(cl)
rfc_loocv$results
set.seed(123)
library(doParallel)
cl <- parallel::makeCluster(11, setup_strategy = "sequential")
registerDoParallel(cl)
# Leave one out cross-validation
fit_control <- trainControl(method = "LOOCV")
rfr_loocv <- train(BNF ~.,
pan_genome_BNF,
method = "rf",
ntree = 501,
tuneGrid = data.frame(mtry = 3276),
trControl = fit_control)
stopCluster(cl)
rfr_loocv$results
RF_state_classify
RF_state_classify$predicted
RF_state_classify
RF_state_classify$predicted
RF_BNF_regress
plot(RF_BNF_regress)
RF_BNF_regress
par(mfrow=c(1,2))
RF_state_classify_imp <- as.data.frame(RF_state_classify$importance)
RF_state_classify_imp$features <- rownames(RF_state_classify_imp)
RF_state_classify_imp_sorted <- arrange(RF_state_classify_imp, desc(MeanDecreaseAccuracy))
barplot(RF_state_classify_imp_sorted$MeanDecreaseAccuracy,
ylab = "Mean Decrease in Accuracy (Variable Importance)",
main = "RF Classification Variable Importance Distribution")
RF_state_classify_imp <- as.data.frame(RF_state_classify$importance)
RF_state_classify_imp$features <- rownames(RF_state_classify_imp)
RF_state_classify_imp_sorted <- arrange(RF_state_classify_imp, desc(MeanDecreaseAccuracy))
barplot(RF_state_classify_imp_sorted$MeanDecreaseAccuracy,
ylab = "Mean Decrease in Accuracy (Variable Importance)",
main = "RF Classification Variable Importance Distribution")
RF_BNF_regress_imp <- as.data.frame(RF_BNF_regress$importance)
RF_BNF_regress_imp$features <- rownames(RF_BNF_regress_imp)
RF_BNF_regress_imp_sorted <- arrange(RF_BNF_regress_imp,
desc(`%IncMSE`))
barplot(RF_BNF_regress_imp_sorted$`%IncMSE`,
ylab="% Increase in Mean Squared Error (Variable Importance)",
main="RF Regression Variable Importance Distribution")
barplot(RF_state_classify_imp_sorted[1:50,"MeanDecreaseAccuracy"],
names.arg=RF_state_classify_imp_sorted[1:50,"features"],
ylab="Mean Decrease in Accuracy (Variable Importance)",
las=2,
ylim=c(0,0.02),
main="Classification RF")
barplot(RF_BNF_regress_imp_sorted[1:25,"%IncMSE"],
names.arg=RF_BNF_regress_imp_sorted[1:25,"features"],
ylab="% Increase in Mean Squared Error (Variable Importance)",
las=2,
ylim=c(0,0.2),
main="Regression RF")
barplot(RF_BNF_regress_imp_sorted[1:25,"%IncMSE"],
names.arg=RF_BNF_regress_imp_sorted[1:25,"features"],
ylab="% Increase in Mean Squared Error (VI)",
las=2,
ylim=c(0,0.2),
main="RFR Predictors ranked by VI")
# Classification Model
RF_classify_top200 <- RF_state_classify_imp_sorted[1:200,]
## add method variable
RF_classify_top200$Method <- "RF Classify"
### Make df for comparison with scoary genes
RF_classify_cmp <- RF_classify_top200 %>%
select(features, Method)
#### Convert features to factor
RF_classify_cmp$features <- as.factor(RF_classify_cmp$features)
##### Count number of Hypothetical proteins (those with 'group' prefixes)
RF_classify_top200 %>%
filter(grepl("group", features, fixed = T)) %>% count() # 142 features annotated as HPs by Prokka
# Regression Model
RF_regress_top200 <- RF_BNF_regress_imp_sorted[1:200,]
## add method variable
RF_regress_top200$Method <- "RF Regression"
### Make df for comparison with scoary genes
RF_regress_cmp <- RF_regress_top200 %>%
select(features, Method)
#### Convert features to factor
RF_regress_cmp$features <- as.factor(RF_regress_cmp$features)
##### Count number of Hypothetical proteins (those with 'group' prefixes)
RF_regress_top200 %>%
filter(grepl("group", features, fixed = T)) %>% count() # 161 features annotated as HPs by Prokka
barplot(RF_BNF_regress_imp_sorted[1:50,"%IncMSE"],
names.arg=RF_BNF_regress_imp_sorted[1:25,"features"],
ylab="% Increase in Mean Squared Error (VI)",
las=2,
ylim=c(0,0.2),
main="RFR Predictors ranked by VI")
barplot(RF_BNF_regress_imp_sorted[1:50,"%IncMSE"],
names.arg=RF_BNF_regress_imp_sorted[1:50,"features"],
ylab="% Increase in Mean Squared Error (VI)",
las=2,
ylim=c(0,0.2),
main="RFR Predictors ranked by VI")
# Classification Model
RF_classify_top200 <- RF_state_classify_imp_sorted[1:200,]
## add method variable
RF_classify_top200$Method <- "RF Classify"
### Make df for comparison with scoary genes
RF_classify_cmp <- RF_classify_top200 %>%
select(features, Method)
#### Convert features to factor
RF_classify_cmp$features <- as.factor(RF_classify_cmp$features)
##### Count number of Hypothetical proteins (those with 'group' prefixes)
RF_classify_top200 %>%
filter(grepl("group", features, fixed = T)) %>% count() # 142 features annotated as HPs by Prokka
# Regression Model
RF_regress_top200 <- RF_BNF_regress_imp_sorted[1:200,]
## add method variable
RF_regress_top200$Method <- "RF Regression"
### Make df for comparison with scoary genes
RF_regress_cmp <- RF_regress_top200 %>%
select(features, Method)
#### Convert features to factor
RF_regress_cmp$features <- as.factor(RF_regress_cmp$features)
##### Count number of Hypothetical proteins (those with 'group' prefixes)
RF_regress_top200 %>%
filter(grepl("group", features, fixed = T)) %>% count() # 165 features annotated as HPs by Prokka
barplot(RF_state_classify_imp_sorted[1:10,"MeanDecreaseAccuracy"],
names.arg=RF_state_classify_imp_sorted[1:10,"features"],
ylab="Mean Decrease in Accuracy (Variable Importance)",
las=2,
ylim=c(0,0.02),
main="Classification RF")
barplot(RF_BNF_regress_imp_sorted[1:10,"%IncMSE"],
names.arg=RF_BNF_regress_imp_sorted[1:10,"features"],
ylab="% Increase in Mean Squared Error (VI)",
las=2,
ylim=c(0,0.2),
main="RFR Predictors ranked by VI")
barplot(rfc2_imp.df.sorted[1:10,"MeanDecreaseAccuracy"],
names.arg=rfc2_imp.df.sorted[1:10,"features"],
ylab="Mean Decrease in Accuracy (Variable Importance)",
las=2,
ylim=c(0,0.02),
main="Classification RF")
# Classification Model
rfc2_top200 <- rfc2_imp.df.sorted[1:200,]
## add method variable
rfc2_top200$Method <- "RF Classify"
### Make df for comparison with scoary genes
rfc2_cmp <- rfc2_top200 %>%
select(features, Method)
#### Convert features to factor
rfc2_cmp$features <- as.factor(rfc2_cmp$features)
##### Count number of Hypothetical proteins (those with 'group' prefixes)
rfc2_top200 %>%
filter(grepl("group", features, fixed = T)) %>% count() # 142 features annotated as HPs by Prokka
upset_list2 <- list(`RFC1` = RF_classify_top200$features,
`RFC2` = rfc2_top200$features)
library(UpSetR)
upset_list2 <- list(`RFC1` = RF_classify_top200$features,
`RFC2` = rfc2_top200$features)
upset_plot2 <- UpSetR::upset(UpSetR::fromList(upset_list2),
matrix.color = "firebrick4", point.size = 5,
mainbar.y.label = "Gene Intersection Size",
sets.x.label = "Gene Set Size",
#sets.bar.color = c("seagreen", "gold", "dodgerblue4"),
text.scale = c(1.5))
upset_plot2
# save as PDF
pdf(file = "./plots/rfc_cmp_upset_plot.pdf")
upset_plot2
dev.off()
# source of this function: https://github.com/hms-dbmi/UpSetR/issues/85#issuecomment-327900647
fromList <- function (input) {
# Same as original fromList()...
elements <- unique(unlist(input))
data <- unlist(lapply(input, function(x) {
x <- as.vector(match(elements, x))
}))
data[is.na(data)] <- as.integer(0)
data[data != 0] <- as.integer(1)
data <- data.frame(matrix(data, ncol = length(input), byrow = F))
data <- data[which(rowSums(data) != 0), ]
names(data) <- names(input)
# ... Except now it conserves your original value names!
row.names(data) <- elements
return(data)
}
overlapGroups <- function (listInput, sort = TRUE) {
# listInput could look like this:
# $one
# [1] "a" "b" "c" "e" "g" "h" "k" "l" "m"
# $two
# [1] "a" "b" "d" "e" "j"
# $three
# [1] "a" "e" "f" "g" "h" "i" "j" "l" "m"
listInputmat    <- fromList(listInput) == 1
#     one   two three
# a  TRUE  TRUE  TRUE
# b  TRUE  TRUE FALSE
#...
# condensing matrix to unique combinations elements
listInputunique <- unique(listInputmat)
grouplist <- list()
# going through all unique combinations and collect elements for each in a list
for (i in 1:nrow(listInputunique)) {
currentRow <- listInputunique[i,]
myelements <- which(apply(listInputmat,1,function(x) all(x == currentRow)))
attr(myelements, "groups") <- currentRow
grouplist[[paste(colnames(listInputunique)[currentRow], collapse = ":")]] <- myelements
myelements
# attr(,"groups")
#   one   two three
# FALSE FALSE  TRUE
#  f  i
# 12 13
}
if (sort) {
grouplist <- grouplist[order(sapply(grouplist, function(x) length(x)), decreasing = TRUE)]
}
attr(grouplist, "elements") <- unique(unlist(listInput))
return(grouplist)
# save element list to facilitate access using an index in case rownames are not named
}
rfc_groups <- overlapGroups(upset_list2)
attr(rfc_groups, "elements")
View(rfc_groups)
# features in group 3
rgc_groups[3]
# features in group 3
rfc_groups[3]
# features in group 3
attr(rfc_groups, "elements")[rfc_groups[3]]
# features in group 3
attr(rfc_groups, "elements")[rfc_groups[[3]]]
# extract features in RFC1:RFC2 group
rfc.common.df <- data.frame(rfc.common = attr(rfc_groups, "elements")[rfc_groups[[3]]])
View(rfc.common.df)
# extract group feature lists
all.3.groups <- overlapGroups(upset_list)
# features in all groups
attr(all.3.groups, "elements")
View(all.3.groups)
# extract features in GWAS:RFC1:RFR group
all.3.common.df <- data.frame(all.common = attr(all.3.groups, "elements")[all.3.groups[[5]]])
View(all.3.common.df)
rfc.select.df <- rfc.common.df$rfc.common %in% all.3.common.df$all.common
View(rfc.select.df)
rfc.select.df <- subset(rfc.common.df, rfc.common %in% all.3.common.df$all.common)
View(rfc.select.df)
# arrange descending alphabetically
rfc.select.df <- rfc.select.df %>% arrange(desc())
# arrange descending alphabetically
rfc.select.df <- rfc.select.df %>% arrange()
# arrange descending alphabetically
rfc.select.df <- rfc.select.df %>% arrange(rfc.common)
attr(rfc_groups, "elements")[rfc_groups[[3]]]
rfc.common.df$rfc.common %>% arrange()
rfc.common.df %>% arrange(rfc.common)
attr(rfc_groups, "elements")[rfc_groups[[3]]] %>% arrange()
order([rfc_groups[[3]]])
order([rfc_groups[[3]])
order(attr(rfc_groups, "elements")[rfc_groups[[3]]]))
order(attr(rfc_groups, "elements")[rfc_groups[[3]]])
sort(attr(rfc_groups, "elements")[rfc_groups[[3]]])
version
knitr::opts_chunk$set(echo = TRUE)
getwd()
strain.labels <- read.csv("../../Tables/strain-labels.csv", header = T)
head(strain.labels)
strain.labels %>% mutate(label = unite(., sep = " "))
library(tidyverse)
strain.labels %>% mutate(label = unite(., sep = " "))
head(strain.labels)
strain.labels %>% mutate(label = unite(ssp, strain, bcw, sep = " "))
strain.labels %>% mutate(label = unite("ssp", "strain", "bcw", sep = " "))
strain.labels %>% mutate(label = unite(., "ssp", "strain", "bcw", sep = " "))
strain.labels %>% unite("label", "ssp", "strain", "bcw", sep = " "))
strain.labels %>% unite("label", "ssp", "strain", "bcw", sep = " ")
strain.labels <- read.csv("../../Tables/strain-labels.csv", header = T)
strain.labels %>% unite("label", "ssp", "strain", "bcw", sep = " ", remove = FALSE)
strain.labels %>% unite("label", ssp:bcw, sep = " ", remove = FALSE)
View(strain.labels)
library(tidyverse)
strain.labels <- read.csv("../../Tables/strain-labels.csv", header = T)
head(strain.labels)
strain.labels %>% unite("new.strain", strain:bcw, sep = "-", remove = FALSE) %>%
unite("label", c("ssp","new.strain"), sep = " ", remove = FALSE)
library(tidyverse)
strain.labels <- read.csv("../../Tables/strain-labels.csv", header = T)
head(strain.labels)
new.labels <- strain.labels %>%
unite("new.strain", strain:bcw, sep = "-", remove = FALSE) %>%
unite("label", c("ssp","new.strain"), sep = " ", remove = FALSE)
View(new.labels)
write.csv(new.labels, "../../Tables/new-strain-labels.csv", col.names = T)
new.labels <- str_pad(ssp, side = "left", pad = "subsp.")
new.labels <- str_pad("ssp", side = "left", pad = "subsp.")
new.labels <- new.labels %>% str_pad(ssp, side = "left", pad = "subsp.")
new.labels <- new.labels %>% str_pad("ssp", side = "left", pad = "subsp.")
strain.labels$ssp <- paste0("subsp. ", strain.labels$ssp)
new.labels <- strain.labels %>%
unite("new.strain", strain:bcw, sep = "-", remove = FALSE) %>%
unite("label", c("ssp","new.strain"), sep = " ", remove = FALSE)
View(new.labels)
write.csv(new.labels, "../../Tables/new-strain-labels.csv", col.names = T)
library(tidyverse)
strain.labels <- read.csv("../../Tables/strain-labels.csv", header = T)
head(strain.labels)
strain.labels$ssp <- paste0("Lactococcus lactis subsp. ", strain.labels$ssp)
new.labels <- strain.labels %>%
unite("new.strain", strain:bcw, sep = "-", remove = FALSE) %>%
unite("label", c("ssp","new.strain"), sep = " ", remove = FALSE)
View(new.labels)
write.csv(new.labels, "../../Tables/new-strain-labels.csv", col.names = T)
